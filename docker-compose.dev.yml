services:
  postgres:
    image: postgres:15-alpine
    container_name: instagram-agent-postgres
    environment:
      POSTGRES_DB: instagram_agent
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.dev
    container_name: instagram-agent-backend
    env_file:
      - ./apps/backend/.env
    environment:
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/instagram_agent?schema=public"
    ports:
      - "3001:3001"
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'ğŸ”„ Installing dependencies...' &&
        npm install --legacy-peer-deps &&
        echo 'ğŸ”„ Generating Prisma client...' &&
        npx prisma generate &&
        echo 'ğŸ”„ Running database migrations...' &&
        npx prisma migrate dev --name init &&
        echo 'ğŸš€ Starting backend server...' &&
        npm run start:dev
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile.dev
    container_name: instagram-agent-frontend
    env_file:
      - ./apps/frontend/.env
    ports:
      - "3000:3000"
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    command: >
      sh -c "
        echo 'ğŸ”„ Installing dependencies...' &&
        npm install --legacy-peer-deps &&
        echo 'ğŸš€ Starting frontend server...' &&
        npm run dev
      "

volumes:
  postgres_data: